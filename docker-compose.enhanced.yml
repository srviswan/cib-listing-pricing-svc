version: '3.8'

services:
  # Existing services (unchanged)
  basket-timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: basket-timescaledb
    environment:
      POSTGRES_DB: basket_platform
      POSTGRES_USER: basket_user
      POSTGRES_PASSWORD: basket_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - ./database/init:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    networks:
      - basket-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U basket_user -d basket_platform"]
      interval: 30s
      timeout: 10s
      retries: 5

  basket-core-service:
    build:
      context: .
      dockerfile: basket-core-service/Dockerfile
    container_name: basket-core-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=minimal
      - SPRING_DATASOURCE_URL=jdbc:postgresql://basket-timescaledb:5432/basket_platform
      - SPRING_DATASOURCE_USERNAME=basket_user
      - SPRING_DATASOURCE_PASSWORD=basket_password
    depends_on:
      basket-timescaledb:
        condition: service_healthy
    networks:
      - basket-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  market-data-service:
    build:
      context: .
      dockerfile: market-data-service/Dockerfile
    container_name: market-data-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=minimal
      - SPRING_DATASOURCE_URL=jdbc:postgresql://basket-timescaledb:5432/basket_platform
      - SPRING_DATASOURCE_USERNAME=basket_user
      - SPRING_DATASOURCE_PASSWORD=basket_password
    depends_on:
      basket-timescaledb:
        condition: service_healthy
    networks:
      - basket-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  publishing-service:
    build:
      context: .
      dockerfile: publishing-service/Dockerfile
    container_name: publishing-service
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=minimal
      - SPRING_DATASOURCE_URL=jdbc:postgresql://basket-timescaledb:5432/basket_platform
      - SPRING_DATASOURCE_USERNAME=basket_user
      - SPRING_DATASOURCE_PASSWORD=basket_password
    depends_on:
      basket-timescaledb:
        condition: service_healthy
    networks:
      - basket-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # New integration services
  sma-adapter-service:
    build:
      context: .
      dockerfile: sma-adapter-service/Dockerfile
    container_name: sma-adapter-service
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=sma
      - SMA_API_URL=${SMA_API_URL:-https://api.refinitiv.com}
      - SMA_APP_KEY=${SMA_APP_KEY:-your-app-key}
      - SMA_USERNAME=${SMA_USERNAME:-your-username}
      - SMA_PASSWORD=${SMA_PASSWORD:-your-password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - redis
    networks:
      - basket-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/sma-adapter/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  fix-adapter-service:
    build:
      context: .
      dockerfile: fix-adapter-service/Dockerfile
    container_name: fix-adapter-service
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=fix
      - BLOOMBERG_FIX_HOST=${BLOOMBERG_FIX_HOST:-fix.bloomberg.com}
      - BLOOMBERG_FIX_PORT=${BLOOMBERG_FIX_PORT:-8080}
      - FIX_SENDER_COMP_ID=${FIX_SENDER_COMP_ID:-YOUR_COMP_ID}
      - FIX_TARGET_COMP_ID=${FIX_TARGET_COMP_ID:-BLOOMBERG}
      - BLOOMBERG_USERNAME=${BLOOMBERG_USERNAME:-your-username}
      - BLOOMBERG_PASSWORD=${BLOOMBERG_PASSWORD:-your-password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - redis
    networks:
      - basket-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/fix-adapter/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  integration-manager-service:
    build:
      context: .
      dockerfile: integration-manager-service/Dockerfile
    container_name: integration-manager-service
    ports:
      - "8086:8086"
    environment:
      - SPRING_PROFILES_ACTIVE=integration
      - SMA_ADAPTER_URL=http://sma-adapter-service:8084/sma-adapter
      - FIX_ADAPTER_URL=http://fix-adapter-service:8085/fix-adapter
      - BASKET_CORE_URL=http://basket-core-service:8081
      - MARKET_DATA_URL=http://market-data-service:8082
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - sma-adapter-service
      - fix-adapter-service
      - basket-core-service
      - market-data-service
      - redis
    networks:
      - basket-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/integration-manager/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: basket-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - basket-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka for messaging (optional)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: basket-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - basket-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: basket-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    depends_on:
      - zookeeper
    networks:
      - basket-network

volumes:
  postgres_data:
  redis_data:

networks:
  basket-network:
    driver: bridge
