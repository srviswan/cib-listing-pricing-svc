package com.custom.indexbasket.common.communication;

import java.time.Instant;
import java.util.List;
import java.util.ArrayList;

/**
 * Represents a recommendation for which communication protocol to use.
 * Generated by the Smart Communication Router based on request requirements.
 */
public class ProtocolRecommendation {
    
    private final CommunicationProtocol recommendedProtocol;
    private final double confidenceScore;
    private final String reasoning;
    private final List<CommunicationProtocol> alternatives;
    private final Instant timestamp;
    
    public ProtocolRecommendation(CommunicationProtocol recommendedProtocol, double confidenceScore, String reasoning) {
        this.recommendedProtocol = recommendedProtocol;
        this.confidenceScore = confidenceScore;
        this.reasoning = reasoning;
        this.alternatives = new ArrayList<>();
        this.timestamp = Instant.now();
    }
    
    public ProtocolRecommendation(CommunicationProtocol recommendedProtocol, double confidenceScore, 
                                 String reasoning, List<CommunicationProtocol> alternatives) {
        this.recommendedProtocol = recommendedProtocol;
        this.confidenceScore = confidenceScore;
        this.reasoning = reasoning;
        this.alternatives = alternatives != null ? new ArrayList<>(alternatives) : new ArrayList<>();
        this.timestamp = Instant.now();
    }
    
    // Getters
    public CommunicationProtocol getRecommendedProtocol() { return recommendedProtocol; }
    public double getConfidenceScore() { return confidenceScore; }
    public String getReasoning() { return reasoning; }
    public List<CommunicationProtocol> getAlternatives() { return new ArrayList<>(alternatives); }
    public Instant getTimestamp() { return timestamp; }
    
    // Utility methods
    public boolean isHighConfidence() {
        return confidenceScore >= 0.8;
    }
    
    public boolean isMediumConfidence() {
        return confidenceScore >= 0.6 && confidenceScore < 0.8;
    }
    
    public boolean isLowConfidence() {
        return confidenceScore < 0.6;
    }
    
    public boolean hasAlternatives() {
        return !alternatives.isEmpty();
    }
    
    public void addAlternative(CommunicationProtocol alternative) {
        if (!alternatives.contains(alternative)) {
            alternatives.add(alternative);
        }
    }
    
    @Override
    public String toString() {
        return String.format("ProtocolRecommendation{protocol=%s, confidence=%.2f, reasoning='%s', alternatives=%s}",
                recommendedProtocol, confidenceScore, reasoning, alternatives);
    }
}
